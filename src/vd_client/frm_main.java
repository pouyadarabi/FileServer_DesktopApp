/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vd_client;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import vd_client.helper.SocketClient;
import vd_client.helper.globalVars;
import vd_client.helper.objects.FileDownload;

/**
 *
 * @author pouya
 */
public class frm_main extends javax.swing.JFrame {

    Timer timer;
    SocketClient client;
    JFrame main_frm;

    /**
     * Creates new form frm_main
     */
    public frm_main(SocketClient client, JFrame main_frm) {

        initComponents();
        this.client = client;
        this.client.setActive_form(this);
        this.setLocationRelativeTo(null);
        this.main_frm = main_frm;

        updateInfo();

    }

    public frm_main() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_filepath = new javax.swing.JTextField();
        file_progressbar = new javax.swing.JProgressBar();
        progressbar_qouta = new javax.swing.JProgressBar();
        lbl_qouta = new javax.swing.JLabel();
        btn_refresh = new javax.swing.JLabel();
        btn_selectfile = new javax.swing.JLabel();
        btn_upload = new javax.swing.JLabel();
        lbl_percent = new javax.swing.JLabel();
        btn_download = new javax.swing.JLabel();
        btn_delete = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_files = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Main"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txt_filepath.setToolTipText("");
        txt_filepath.setEnabled(false);

        lbl_qouta.setText("Qouta");

        btn_refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1485294213_radial_arrows.png"))); // NOI18N
        btn_refresh.setToolTipText("Refresh Data");
        btn_refresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_refreshMouseClicked(evt);
            }
        });

        btn_selectfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1485294370_Add.png"))); // NOI18N
        btn_selectfile.setToolTipText("Select File");
        btn_selectfile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_selectfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_selectfileMouseClicked(evt);
            }
        });

        btn_upload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1485273621_upload.png"))); // NOI18N
        btn_upload.setToolTipText("Upload file to server");
        btn_upload.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_upload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_uploadMouseClicked(evt);
            }
        });

        lbl_percent.setLocation(new java.awt.Point(-1000, -1000));

        btn_download.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1485277248_download.png"))); // NOI18N
        btn_download.setToolTipText("download from server");
        btn_download.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_download.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_downloadMouseClicked(evt);
            }
        });

        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1485292844_office-20.png"))); // NOI18N
        btn_delete.setToolTipText("Delete file from server");
        btn_delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_deleteMouseClicked(evt);
            }
        });

        jScrollPane1.setMaximumSize(new java.awt.Dimension(200, 100));
        jScrollPane1.setSize(new java.awt.Dimension(146, 140));

        list_files.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_files.setToolTipText("");
        list_files.setSize(new java.awt.Dimension(146, 136));
        jScrollPane1.setViewportView(list_files);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbl_percent, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(173, 173, 173))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(123, 123, 123)
                                        .addComponent(lbl_qouta))
                                    .addComponent(txt_filepath)
                                    .addComponent(progressbar_qouta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(file_progressbar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_selectfile)
                            .addComponent(btn_refresh))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_upload)
                            .addComponent(btn_download)
                            .addComponent(btn_delete))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_qouta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressbar_qouta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn_refresh))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(txt_filepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(btn_selectfile)))
                        .addGap(18, 18, 18)
                        .addComponent(lbl_percent, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(file_progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_upload))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_download)
                        .addGap(59, 59, 59)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void disconnect_callback() {

        JOptionPane.showMessageDialog(null, "Disconnected from server!", "Error", JOptionPane.ERROR_MESSAGE);

        main_frm.setVisible(true);
        this.dispose();

    }

    private void updateInfo() {
        JsonObject jsObj = new JsonObject();
        jsObj.addProperty("Object_ID", globalVars.USER_INFO);
        this.client.SendData(jsObj.toString(), globalVars.USER_INFO, "userinfo_callback");
    }

    public void userinfo_callback(boolean status, String Data) {
        if (status) {

            JsonObject jsobj = new Gson().fromJson(Data, JsonObject.class);

            float quota = jsobj.get("quota").getAsFloat();
            float total_quota = jsobj.get("total_quota").getAsFloat();

            JsonArray asJsonArray = jsobj.get("files").getAsJsonArray();

            DecimalFormat df = new DecimalFormat("#.##");

            int Total = (int) total_quota;
            int Used = Total - (int) quota;

            lbl_qouta.setText("Remained Quota: " + df.format(quota) + " / " + df.format(total_quota));

            progressbar_qouta.setMaximum(Total);
            progressbar_qouta.setValue(Used);

            DefaultListModel listModel = new DefaultListModel();
            asJsonArray.forEach(item -> {
                String obj = item.getAsString();
                listModel.addElement(obj);

            });
            list_files.removeAll();
            list_files.setModel(listModel);

            // this.pack();
        }

    }

    public void upload_callback(boolean status, String msg) {

        if (status) {
            txt_filepath.setText("");
            SetEnableActions(true);
            client.UploadSelectedFile();

            ActionListener listener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    int currentState = client.getWriteStatus();
                    file_progressbar.setValue(currentState);
                    lbl_percent.setText("%" + currentState);
                    if (currentState == 100) {
                        SetEnableActions(true);
                        updateInfo();

                        JOptionPane.showMessageDialog(null, "File uploaded successfully");
                        file_progressbar.setValue(0);
                        lbl_percent.setText("");
                        timer.stop();

                    }
                }

            };
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    timer = new Timer(1000, listener);
                    timer.start();
                }
            });

        } else {
            JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
        }

    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // TODO add your handling code here:

            client.close();
        } catch (IOException ex) {
            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void btn_refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_refreshMouseClicked
        // TODO add your handling code here:
        updateInfo();
    }//GEN-LAST:event_btn_refreshMouseClicked

    private void btn_selectfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_selectfileMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            txt_filepath.setText(fileChooser.getSelectedFile().getAbsolutePath());

        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_btn_selectfileMouseClicked

    private void btn_uploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_uploadMouseClicked
        // TODO add your handling code here:
        client.UploadFileHeader(txt_filepath.getText(), globalVars.FILE_HEADER, "upload_callback");


    }//GEN-LAST:event_btn_uploadMouseClicked

    private void btn_downloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_downloadMouseClicked
        // TODO add your handling code here:

        String value = list_files.getSelectedValue();

        if (value == null || value.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a file to download", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SetEnableActions(false);

        JsonObject jsObj = new JsonObject();
        jsObj.addProperty("Object_ID", globalVars.Download_File);
        jsObj.addProperty("File_name", value);
        this.client.SendData(jsObj.toString(), globalVars.Download_File, "downloadfile_callback");


    }//GEN-LAST:event_btn_downloadMouseClicked

    private void btn_deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_deleteMouseClicked
        // TODO add your handling code here:

        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete file?", "Warning", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.NO_OPTION) {
            return;

        }
        String value = this.list_files.getSelectedValue();

        if (value == null || value.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a file to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SetEnableActions(false);

        JsonObject jsObj = new JsonObject();
        jsObj.addProperty("Object_ID", globalVars.Delete_File);
        jsObj.addProperty("File_name", value);
        this.client.SendData(jsObj.toString(), globalVars.Delete_File, "delete_callback");
    }//GEN-LAST:event_btn_deleteMouseClicked

    public void delete_callback(boolean status, String msg) {

        if (status) {
            updateInfo();
            SetEnableActions(true);
            JOptionPane.showMessageDialog(null, "File deleted successfully");

        } else {
            JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void SetEnableActions(boolean status) {
        this.btn_refresh.setEnabled(status);
        this.btn_download.setEnabled(status);
        this.btn_upload.setEnabled(status);
        this.list_files.setEnabled(status);
        this.btn_delete.setEnabled(status);
    }

    public void downloadfile_callback(boolean status, String msg) {

        if (status) {
            JsonObject jsobj = new Gson().fromJson(msg, JsonObject.class);

            String file_name = jsobj.get("_filename").getAsString();
            Integer file_size = jsobj.get("_fileSize").getAsInt();
            FileDownload fld = new FileDownload(file_size, file_name);

            client.setFileDownload(fld);

            ActionListener listener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    Integer currentState = client.getDownloadStatus();
                    file_progressbar.setValue(currentState);
                    lbl_percent.setText("%" + currentState);
                    if (currentState == 100) {

                        updateInfo();
                        JOptionPane.showMessageDialog(null, "File downloaded successfully");
                        SetEnableActions(true);
                        file_progressbar.setValue(0);
                        lbl_percent.setText("");
                        timer.stop();

                    }
                }

            };
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    timer = new Timer(1000, listener);
                    timer.start();
                }
            });
        } else {
            JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btn_delete;
    private javax.swing.JLabel btn_download;
    private javax.swing.JLabel btn_refresh;
    private javax.swing.JLabel btn_selectfile;
    private javax.swing.JLabel btn_upload;
    private javax.swing.JProgressBar file_progressbar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_percent;
    private javax.swing.JLabel lbl_qouta;
    private javax.swing.JList<String> list_files;
    private javax.swing.JProgressBar progressbar_qouta;
    private javax.swing.JTextField txt_filepath;
    // End of variables declaration//GEN-END:variables
}
